// AppRouter types for tRPC client
// This file is auto-generated from actual nestjs-trpc routers
// Run 'npm run sync:trpc-types' to regenerate this file
// Generated on: 2025-09-09T16:35:42.096Z

import { initTRPC } from '@trpc/server';
import { z } from 'zod';

// Initialize tRPC for type creation
const t = initTRPC.create();

// Define the AppRouter using tRPC's router structure
// This matches the actual @Router aliases and procedures from nestjs-trpc routers
const appRouter = t.router({
  adminChartData: t.router({
    getChartData: t.procedure.query(() => null),
    getAvailableChartTypes: t.procedure.query(() => null),
  }),
  adminEmailChannel: t.router({
    createChannel: t.procedure.mutation(() => null),
    getChannels: t.procedure.query(() => null),
    getChannelById: t.procedure.query(() => null),
    getActiveChannels: t.procedure.query(() => null),
    getChannelsByUsageType: t.procedure.query(() => null),
    getDefaultChannel: t.procedure.query(() => null),
    updateChannel: t.procedure.mutation(() => null),
    deleteChannel: t.procedure.mutation(() => null),
    setAsDefault: t.procedure.mutation(() => null),
    testChannel: t.procedure.mutation(() => null),
    cloneChannel: t.procedure.mutation(() => null),
  }),
  adminFirebaseConfig: t.router({
    getAllConfigs: t.procedure.query(() => null),
    getConfig: t.procedure.query(() => null),
    createConfig: t.procedure.mutation(() => null),
    updateConfig: t.procedure.mutation(() => null),
    deleteConfig: t.procedure.mutation(() => null),
  }),
  adminLanguage: t.router({
    getLanguages: t.procedure.query(() => null),
    getActiveLanguages: t.procedure.query(() => null),
    getLanguageById: t.procedure.query(() => null),
    getDefaultLanguage: t.procedure.query(() => null),
    createLanguage: t.procedure.mutation(() => null),
    updateLanguage: t.procedure.mutation(() => null),
    deleteLanguage: t.procedure.mutation(() => null),
    setDefaultLanguage: t.procedure.mutation(() => null),
    toggleLanguageStatus: t.procedure.mutation(() => null),
    updateSortOrders: t.procedure.mutation(() => null),
  }),
  adminMailTemplate: t.router({
    createTemplate: t.procedure.mutation(() => null),
    getTemplates: t.procedure.query(() => null),
    getTemplateById: t.procedure.query(() => null),
    getTemplateByName: t.procedure.query(() => null),
    updateTemplate: t.procedure.mutation(() => null),
    deleteTemplate: t.procedure.mutation(() => null),
    processTemplate: t.procedure.mutation(() => null),
    cloneTemplate: t.procedure.mutation(() => null),
    getTemplateTypes: t.procedure.query(() => null),
    getStatistics: t.procedure.query(() => null),
    bulkUpdateStatus: t.procedure.mutation(() => null),
    searchTemplates: t.procedure.query(() => null),
  }),
  adminPostCategories: t.router({
    getCategories: t.procedure.query(() => null),
    getCategoryById: t.procedure.query(() => null),
    createCategory: t.procedure.mutation(() => null),
    updateCategory: t.procedure.mutation(() => null),
    deleteCategory: t.procedure.mutation(() => null),
  }),
  adminPostTags: t.router({
    getTags: t.procedure.query(() => null),
    searchTags: t.procedure.query(() => null),
    getTagById: t.procedure.query(() => null),
    createTag: t.procedure.mutation(() => null),
    updateTag: t.procedure.mutation(() => null),
    deleteTag: t.procedure.mutation(() => null),
    getPopularTags: t.procedure.query(() => null),
  }),
  adminPosts: t.router({
    getPosts: t.procedure.query(() => null),
    getPostById: t.procedure.query(() => null),
  }),
  adminProductBrands: t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
  }),
  adminProductCategories: t.router({
    getAll: t.procedure.query(() => null),
    getTree: t.procedure.query(() => null),
    getRootCategories: t.procedure.query(() => null),
    getCategoryChildren: t.procedure.query(() => null),
    getById: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
  }),
  adminProducts: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
    updateStatus: t.procedure.input(z.any()).mutation(() => null),
  }),
  clientProducts: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    featured: t.procedure.query(() => null),
    byCategory: t.procedure.query(() => null),
    byBrand: t.procedure.query(() => null),
  }),
  publicProducts: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    featured: t.procedure.query(() => null),
    byCategory: t.procedure.query(() => null),
    byBrand: t.procedure.query(() => null),
    search: t.procedure.query(() => null),
  }),
  'admin.seo': t.router({
    getAll: t.procedure.query(() => null),
    getByPath: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
  }),
  'admin.settings': t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.query(() => null),
    getByKey: t.procedure.query(() => null),
    getByGroup: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    bulkUpdate: t.procedure.mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminMedia: t.router({
    getUserMedia: t.procedure.query(() => null),
    getMediaById: t.procedure.query(() => null),
    updateMedia: t.procedure.mutation(() => null),
    deleteMedia: t.procedure.mutation(() => null),
    deleteMultipleMedia: t.procedure.mutation(() => null),
    getMediaStats: t.procedure.query(() => null),
    getRecentMedia: t.procedure.query(() => null),
  }),
  adminStorage: t.router({
    getStorageConfig: t.procedure.query(() => null),
    updateStorageConfig: t.procedure.mutation(() => null),
    testStorageConnection: t.procedure.mutation(() => null),
  }),
  adminPermission: t.router({
    createPermission: t.procedure.mutation(() => null),
    getAllPermissions: t.procedure.query(() => null),
    getPermissionById: t.procedure.query(() => null),
    updatePermission: t.procedure.mutation(() => null),
    deletePermission: t.procedure.mutation(() => null),
    assignPermissionToRole: t.procedure.mutation(() => null),
    removePermissionFromRole: t.procedure.mutation(() => null),
    getRolePermissions: t.procedure.query(() => null),
    grantPermissions: t.procedure.mutation(() => null),
    checkPermission: t.procedure.query(() => null),
  }),
  adminRole: t.router({
    getAllRoles: t.procedure.query(() => null),
    getRoleById: t.procedure.query(() => null),
    createRole: t.procedure.mutation(() => null),
    updateRole: t.procedure.mutation(() => null),
    deleteRole: t.procedure.mutation(() => null),
    getAvailablePermissions: t.procedure.query(() => null),
    getRoleStatistics: t.procedure.query(() => null),
    toggleRoleStatus: t.procedure.mutation(() => null),
    duplicateRole: t.procedure.mutation(() => null),
    addPermissionsToRole: t.procedure.mutation(() => null),
    searchUsersForRole: t.procedure.query(() => null),
    addUsersToRole: t.procedure.mutation(() => null),
  }),
  adminUserActivity: t.router({
    getUserActivityStatus: t.procedure.query(() => null),
    getBulkUserActivityStatus: t.procedure.query(() => null),
    getCurrentlyActiveUsers: t.procedure.query(() => null),
    getRecentlyActiveUsers: t.procedure.query(() => null),
    getActivitySummary: t.procedure.query(() => null),
  }),
  adminUserStatistics: t.router({
    getUserStatistics: t.procedure.query(() => null),
  }),
  adminUser: t.router({
    createUser: t.procedure.mutation(() => null),
    getAllUsers: t.procedure.query(() => null),
    getUserById: t.procedure.query(() => null),
    updateUser: t.procedure.mutation(() => null),
    deleteUser: t.procedure.mutation(() => null),
    updateUserStatus: t.procedure.mutation(() => null),
    updateUserProfileById: t.procedure.mutation(() => null),
    getProfile: t.procedure.query(() => null),
    updateProfile: t.procedure.mutation(() => null),
    updatePassword: t.procedure.mutation(() => null),
  }),
});

// Export the proper tRPC router type
export type AppRouter = typeof appRouter;
