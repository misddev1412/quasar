// AppRouter types for tRPC client
// This file is auto-generated from actual nestjs-trpc routers
// Run 'npm run sync:trpc-types' to regenerate this file
// Generated on: 2025-10-23T15:24:42.080Z

import { initTRPC } from '@trpc/server';
import { z } from 'zod';

// Initialize tRPC for type creation
const t = initTRPC.create();

// Define the AppRouter using tRPC's router structure
// This matches the actual @Router aliases and procedures from nestjs-trpc routers
const appRouter = t.router({
  adminChartData: t.router({
    getChartData: t.procedure.query(() => null),
    getAvailableChartTypes: t.procedure.query(() => null),
  }),
  adminEmailChannel: t.router({
    createChannel: t.procedure.input(z.any()).mutation(() => null),
    getChannels: t.procedure.query(() => null),
    getChannelById: t.procedure.query(() => null),
    getActiveChannels: t.procedure.query(() => null),
    getChannelsByUsageType: t.procedure.query(() => null),
    getDefaultChannel: t.procedure.query(() => null),
    updateChannel: t.procedure.input(z.any()).mutation(() => null),
    deleteChannel: t.procedure.input(z.any()).mutation(() => null),
    setAsDefault: t.procedure.input(z.any()).mutation(() => null),
    testChannel: t.procedure.input(z.any()).mutation(() => null),
    cloneChannel: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminFirebaseConfig: t.router({
    getAllConfigs: t.procedure.query(() => null),
    getConfig: t.procedure.query(() => null),
    createConfig: t.procedure.input(z.any()).mutation(() => null),
    updateConfig: t.procedure.input(z.any()).mutation(() => null),
    deleteConfig: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminLanguage: t.router({
    getLanguages: t.procedure.query(() => null),
    getActiveLanguages: t.procedure.query(() => null),
    getLanguageById: t.procedure.query(() => null),
    getDefaultLanguage: t.procedure.query(() => null),
    createLanguage: t.procedure.input(z.any()).mutation(() => null),
    updateLanguage: t.procedure.input(z.any()).mutation(() => null),
    deleteLanguage: t.procedure.input(z.any()).mutation(() => null),
    setDefaultLanguage: t.procedure.input(z.any()).mutation(() => null),
    toggleLanguageStatus: t.procedure.input(z.any()).mutation(() => null),
    updateSortOrders: t.procedure.input(z.any()).mutation(() => null),
  }),
  clientLanguage: t.router({
    getActiveLanguages: t.procedure.query(() => null),
    getDefaultLanguage: t.procedure.query(() => null),
  }),
  adminMailTemplate: t.router({
    createTemplate: t.procedure.input(z.any()).mutation(() => null),
    getTemplates: t.procedure.query(() => null),
    getTemplateById: t.procedure.query(() => null),
    getTemplateByName: t.procedure.query(() => null),
    updateTemplate: t.procedure.input(z.any()).mutation(() => null),
    deleteTemplate: t.procedure.input(z.any()).mutation(() => null),
    processTemplate: t.procedure.input(z.any()).mutation(() => null),
    cloneTemplate: t.procedure.input(z.any()).mutation(() => null),
    getTemplateTypes: t.procedure.query(() => null),
    getStatistics: t.procedure.query(() => null),
    bulkUpdateStatus: t.procedure.input(z.any()).mutation(() => null),
    searchTemplates: t.procedure.query(() => null),
  }),
  adminMenus: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    byId: t.procedure.query(() => null),
    tree: t.procedure.query(() => null),
    children: t.procedure.query(() => null),
    groups: t.procedure.query(() => null),
    statistics: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    reorder: t.procedure.input(z.any()).mutation(() => null),
    getNextPosition: t.procedure.query(() => null),
  }),
  clientMenus: t.router({
    getByGroup: t.procedure.query(() => null),
    getTree: t.procedure.query(() => null),
  }),
  adminNotificationPreferences: t.router({
    getUserPreferences: t.procedure.query(() => null),
    getUserPreferencesRaw: t.procedure.query(() => null),
    createPreference: t.procedure.input(z.any()).mutation(() => null),
    updatePreference: t.procedure.input(z.any()).mutation(() => null),
    updateUserPreference: t.procedure.input(z.any()).mutation(() => null),
    bulkUpdateUserPreferences: t.procedure.input(z.any()).mutation(() => null),
    deletePreference: t.procedure.input(z.any()).mutation(() => null),
    initializeUserPreferences: t.procedure.input(z.any()).mutation(() => null),
    toggleNotificationType: t.procedure.input(z.any()).mutation(() => null),
    setQuietHours: t.procedure.input(z.any()).mutation(() => null),
    getQuietHours: t.procedure.query(() => null),
    canSendNotification: t.procedure.query(() => null),
  }),
  adminNotification: t.router({
    getNotifications: t.procedure.query(() => null),
    getUserNotifications: t.procedure.query(() => null),
    getNotificationById: t.procedure.query(() => null),
    getUnreadCount: t.procedure.query(() => null),
    getRecentNotifications: t.procedure.query(() => null),
    getNotificationStats: t.procedure.query(() => null),
    createNotification: t.procedure.input(z.any()).mutation(() => null),
    debugSendNotification: t.procedure.input(z.any()).mutation(() => null),
    sendNotificationToUser: t.procedure.input(z.any()).mutation(() => null),
    sendBulkNotifications: t.procedure.input(z.any()).mutation(() => null),
    sendTopicNotification: t.procedure.input(z.any()).mutation(() => null),
    markAsRead: t.procedure.input(z.any()).mutation(() => null),
    markAllAsRead: t.procedure.input(z.any()).mutation(() => null),
    deleteNotification: t.procedure.input(z.any()).mutation(() => null),
    deleteUserNotifications: t.procedure.input(z.any()).mutation(() => null),
    subscribeToTopic: t.procedure.input(z.any()).mutation(() => null),
    unsubscribeFromTopic: t.procedure.input(z.any()).mutation(() => null),
    validateFCMToken: t.procedure.input(z.any()).mutation(() => null),
    sendTestNotification: t.procedure.input(z.any()).mutation(() => null),
    cleanupNotifications: t.procedure.input(z.any()).mutation(() => null),
  }),
  clientNotification: t.router({
    getUserNotifications: t.procedure.query(() => null),
    getUnreadCount: t.procedure.query(() => null),
    getRecentNotifications: t.procedure.query(() => null),
    createNotification: t.procedure.input(z.any()).mutation(() => null),
    markAllAsRead: t.procedure.input(z.any()).mutation(() => null),
    validateFCMToken: t.procedure.input(z.any()).mutation(() => null),
    subscribeToTopic: t.procedure.input(z.any()).mutation(() => null),
    unsubscribeFromTopic: t.procedure.input(z.any()).mutation(() => null),
    getNotificationTypes: t.procedure.query(() => null),
  }),
  userNotification: t.router({
    getMyNotifications: t.procedure.query(() => null),
    getMyRecentNotifications: t.procedure.query(() => null),
    getMyUnreadCount: t.procedure.query(() => null),
    getMyNotificationById: t.procedure.query(() => null),
    getMyNotificationStats: t.procedure.query(() => null),
    markMyNotificationAsRead: t.procedure.input(z.any()).mutation(() => null),
    markMultipleAsRead: t.procedure.input(z.any()).mutation(() => null),
    markAllMyNotificationsAsRead: t.procedure.input(z.any()).mutation(() => null),
    deleteMyNotification: t.procedure.input(z.any()).mutation(() => null),
    deleteMyOldNotifications: t.procedure.input(z.any()).mutation(() => null),
    registerFCMToken: t.procedure.input(z.any()).mutation(() => null),
    testMyNotification: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminPostCategories: t.router({
    getCategories: t.procedure.query(() => null),
    getCategoryById: t.procedure.query(() => null),
    createCategory: t.procedure.input(z.any()).mutation(() => null),
    updateCategory: t.procedure.input(z.any()).mutation(() => null),
    deleteCategory: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminPostTags: t.router({
    getTags: t.procedure.query(() => null),
    searchTags: t.procedure.query(() => null),
    getTagById: t.procedure.query(() => null),
    createTag: t.procedure.input(z.any()).mutation(() => null),
    updateTag: t.procedure.input(z.any()).mutation(() => null),
    deleteTag: t.procedure.input(z.any()).mutation(() => null),
    getPopularTags: t.procedure.query(() => null),
  }),
  adminPosts: t.router({
    getPosts: t.procedure.query(() => null),
    getPostById: t.procedure.query(() => null),
  }),
  adminProductAttributes: t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    getSelectAttributes: t.procedure.query(() => null),
    getFilterableAttributes: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getAttributeValues: t.procedure.query(() => null),
    createAttributeValue: t.procedure.input(z.any()).mutation(() => null),
    updateAttributeValue: t.procedure.input(z.any()).mutation(() => null),
    deleteAttributeValue: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
    getAttributeTranslations: t.procedure.input(z.any()).query(() => null),
    getByIdWithTranslations: t.procedure.input(z.any()).query(() => null),
    createAttributeTranslation: t.procedure.input(z.any()).mutation(() => null),
    updateAttributeTranslation: t.procedure.input(z.any()).mutation(() => null),
    deleteAttributeTranslation: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminProductBrands: t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
    getBrandTranslations: t.procedure.input(z.any()).query(() => null),
    getByIdWithTranslations: t.procedure.input(z.any()).query(() => null),
    createBrandTranslation: t.procedure.input(z.any()).mutation(() => null),
    updateBrandTranslation: t.procedure.input(z.any()).mutation(() => null),
    deleteBrandTranslation: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminProductCategories: t.router({
    getAll: t.procedure.query(() => null),
    getTree: t.procedure.query(() => null),
    getRootCategories: t.procedure.query(() => null),
    getCategoryChildren: t.procedure.query(() => null),
    getFilteredTree: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
    getCategoryTranslations: t.procedure.input(z.any()).query(() => null),
    getByIdWithTranslations: t.procedure.input(z.any()).query(() => null),
    getTreeWithTranslations: t.procedure.query(() => null),
    createCategoryTranslation: t.procedure.input(z.any()).mutation(() => null),
    updateCategoryTranslation: t.procedure.input(z.any()).mutation(() => null),
    deleteCategoryTranslation: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminCustomers: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
    updateStatus: t.procedure.input(z.any()).mutation(() => null),
    search: t.procedure.query(() => null),
    topCustomers: t.procedure.query(() => null),
    recentCustomers: t.procedure.query(() => null),
    inactiveCustomers: t.procedure.query(() => null),
    customersByTag: t.procedure.query(() => null),
    addLoyaltyPoints: t.procedure.input(z.any()).mutation(() => null),
    redeemLoyaltyPoints: t.procedure.input(z.any()).mutation(() => null),
    bulkUpdateStatus: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminDeliveryMethods: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    getActive: t.procedure.query(() => null),
    getByType: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    setDefault: t.procedure.input(z.any()).mutation(() => null),
    toggleActive: t.procedure.input(z.any()).mutation(() => null),
    reorder: t.procedure.input(z.any()).mutation(() => null),
    calculateDelivery: t.procedure.query(() => null),
    getQuotes: t.procedure.query(() => null),
    stats: t.procedure.query(() => null),
  }),
  adminOrders: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    getByOrderNumber: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    updateStatus: t.procedure.input(z.any()).mutation(() => null),
    updatePaymentStatus: t.procedure.input(z.any()).mutation(() => null),
    cancel: t.procedure.input(z.any()).mutation(() => null),
    refund: t.procedure.input(z.any()).mutation(() => null),
    ship: t.procedure.input(z.any()).mutation(() => null),
    fulfill: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
    getByCustomer: t.procedure.query(() => null),
    getByCustomerEmail: t.procedure.query(() => null),
    getProductPrice: t.procedure.query(() => null),
    fulfillItem: t.procedure.input(z.any()).mutation(() => null),
    refundItem: t.procedure.input(z.any()).mutation(() => null),
    deleteItem: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminPaymentMethods: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    active: t.procedure.query(() => null),
    forAmount: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    setDefault: t.procedure.input(z.any()).mutation(() => null),
    toggleActive: t.procedure.input(z.any()).mutation(() => null),
    reorder: t.procedure.input(z.any()).mutation(() => null),
    calculatePayment: t.procedure.query(() => null),
    stats: t.procedure.query(() => null),
  }),
  adminPurchaseOrders: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    approve: t.procedure.input(z.any()).mutation(() => null),
    send: t.procedure.input(z.any()).mutation(() => null),
    cancel: t.procedure.input(z.any()).mutation(() => null),
    receiveItems: t.procedure.input(z.any()).mutation(() => null),
    getOverdueOrders: t.procedure.query(() => null),
    getPendingReceivingOrders: t.procedure.query(() => null),
    getOrderStats: t.procedure.query(() => null),
  }),
  adminProductSuppliers: t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
    getSupplierTranslations: t.procedure.query(() => null),
    getByIdWithTranslations: t.procedure.input(z.any()).query(() => null),
    createSupplierTranslation: t.procedure.input(z.any()).mutation(() => null),
    updateSupplierTranslation: t.procedure.input(z.any()).mutation(() => null),
    deleteSupplierTranslation: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminWarehouses: t.router({
    getAll: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    getStats: t.procedure.query(() => null),
    getInventory: t.procedure.query(() => null),
    adjustStock: t.procedure.input(z.any()).mutation(() => null),
    getMovements: t.procedure.query(() => null),
    getLowStock: t.procedure.query(() => null),
    getOutOfStock: t.procedure.query(() => null),
    getExpiringSoon: t.procedure.query(() => null),
  }),
  adminWishlist: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    updatePriority: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
  }),
  adminProducts: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    addTestMedia: t.procedure.input(z.any()).mutation(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    variantDetail: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    importFromExcel: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    updateVariant: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
    updateStatus: t.procedure.input(z.any()).mutation(() => null),
  }),
  clientOrders: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    recent: t.procedure.query(() => null),
    active: t.procedure.query(() => null),
    cancelOrder: t.procedure.input(z.any()).mutation(() => null),
  }),
  publicProducts: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    featured: t.procedure.query(() => null),
    byCategory: t.procedure.query(() => null),
    byBrand: t.procedure.query(() => null),
    search: t.procedure.query(() => null),
  }),
  'admin.seo': t.router({
    getAll: t.procedure.query(() => null),
    getByPath: t.procedure.input(z.any()).query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
  }),
  'admin.settings': t.router({
    getAll: t.procedure.query(() => null),
    list: t.procedure.input(z.any()).query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    getByKey: t.procedure.query(() => null),
    getByGroup: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    bulkUpdate: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    updateVisibility: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminMedia: t.router({
    getUserMedia: t.procedure.query(() => null),
    getMediaById: t.procedure.query(() => null),
    updateMedia: t.procedure.input(z.any()).mutation(() => null),
    deleteMedia: t.procedure.input(z.any()).mutation(() => null),
    deleteMultipleMedia: t.procedure.input(z.any()).mutation(() => null),
    getMediaStats: t.procedure.query(() => null),
    getRecentMedia: t.procedure.query(() => null),
  }),
  adminStorage: t.router({
    getStorageConfig: t.procedure.query(() => null),
    updateStorageConfig: t.procedure.input(z.any()).mutation(() => null),
    testStorageConnection: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminSupportClients: t.router({
    getAll: t.procedure.query(() => null),
    getById: t.procedure.input(z.any()).query(() => null),
    getDefault: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    setAsDefault: t.procedure.input(z.any()).mutation(() => null),
    updateSortOrder: t.procedure.input(z.any()).mutation(() => null),
    duplicate: t.procedure.input(z.any()).mutation(() => null),
    getWidgetScripts: t.procedure.query(() => null),
    getAvailableClients: t.procedure.query(() => null),
    getStats: t.procedure.query(() => null),
    validateConfiguration: t.procedure.input(z.any()).mutation(() => null),
    getRecommendedSettings: t.procedure.query(() => null),
    getTypes: t.procedure.query(() => null),
    getWidgetPositions: t.procedure.query(() => null),
    getWidgetThemes: t.procedure.query(() => null),
    testAvailability: t.procedure.query(() => null),
  }),
  adminAddressBook: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    detail: t.procedure.input(z.any()).query(() => null),
    getByUserId: t.procedure.query(() => null),
    getByUserIdAndType: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    setAsDefault: t.procedure.input(z.any()).mutation(() => null),
    stats: t.procedure.query(() => null),
  }),
  adminPermission: t.router({
    createPermission: t.procedure.input(z.any()).mutation(() => null),
    getAllPermissions: t.procedure.query(() => null),
    getPermissionById: t.procedure.query(() => null),
    updatePermission: t.procedure.input(z.any()).mutation(() => null),
    deletePermission: t.procedure.input(z.any()).mutation(() => null),
    assignPermissionToRole: t.procedure.input(z.any()).mutation(() => null),
    removePermissionFromRole: t.procedure.input(z.any()).mutation(() => null),
    getRolePermissions: t.procedure.query(() => null),
    grantPermissions: t.procedure.input(z.any()).mutation(() => null),
    checkPermission: t.procedure.query(() => null),
  }),
  adminRole: t.router({
    getAllRoles: t.procedure.query(() => null),
    getRoleById: t.procedure.query(() => null),
    createRole: t.procedure.input(z.any()).mutation(() => null),
    updateRole: t.procedure.input(z.any()).mutation(() => null),
    deleteRole: t.procedure.input(z.any()).mutation(() => null),
    getAvailablePermissions: t.procedure.query(() => null),
    getRoleStatistics: t.procedure.query(() => null),
    toggleRoleStatus: t.procedure.input(z.any()).mutation(() => null),
    duplicateRole: t.procedure.input(z.any()).mutation(() => null),
    addPermissionsToRole: t.procedure.input(z.any()).mutation(() => null),
    searchUsersForRole: t.procedure.query(() => null),
    addUsersToRole: t.procedure.input(z.any()).mutation(() => null),
  }),
  adminUserActivity: t.router({
    getUserActivityStatus: t.procedure.query(() => null),
    getBulkUserActivityStatus: t.procedure.query(() => null),
    getCurrentlyActiveUsers: t.procedure.query(() => null),
    getRecentlyActiveUsers: t.procedure.query(() => null),
    getActivitySummary: t.procedure.query(() => null),
  }),
  adminUserStatistics: t.router({
    getUserStatistics: t.procedure.query(() => null),
  }),
  adminUser: t.router({
    createUser: t.procedure.input(z.any()).mutation(() => null),
    getAllUsers: t.procedure.query(() => null),
    getUserById: t.procedure.query(() => null),
    updateUser: t.procedure.input(z.any()).mutation(() => null),
    deleteUser: t.procedure.input(z.any()).mutation(() => null),
    updateUserStatus: t.procedure.input(z.any()).mutation(() => null),
    updateUserProfileById: t.procedure.input(z.any()).mutation(() => null),
    getProfile: t.procedure.query(() => null),
    updateProfile: t.procedure.input(z.any()).mutation(() => null),
    updatePassword: t.procedure.input(z.any()).mutation(() => null),
  }),
  clientAddressBook: t.router({
    getAddresses: t.procedure.query(() => null),
    getAddressById: t.procedure.input(z.any()).query(() => null),
    createAddress: t.procedure.input(z.any()).mutation(() => null),
    updateAddress: t.procedure.input(z.any()).mutation(() => null),
    deleteAddress: t.procedure.input(z.any()).mutation(() => null),
    setDefaultAddress: t.procedure.input(z.any()).mutation(() => null),
    getDefaultAddress: t.procedure.query(() => null),
    getCountries: t.procedure.query(() => null),
    getAdministrativeDivisions: t.procedure.input(z.any()).query(() => null),
    getAdministrativeDivisionsByParentId: t.procedure.input(z.any()).query(() => null),
  }),
  clientSecurity: t.router({
    getSecurityStatus: t.procedure.query(() => null),
    changePassword: t.procedure.input(z.any()).mutation(() => null),
    setup2FA: t.procedure.input(z.any()).mutation(() => null),
    verify2FA: t.procedure.input(z.any()).mutation(() => null),
    disable2FA: t.procedure.input(z.any()).mutation(() => null),
    getActiveSessions: t.procedure.query(() => null),
    revokeSession: t.procedure.input(z.any()).mutation(() => null),
    revokeAllSessions: t.procedure.input(z.any()).mutation(() => null),
  }),
  addressBook: t.router({
    getAddresses: t.procedure.query(() => null),
    getAddressById: t.procedure.input(z.any()).query(() => null),
    createAddress: t.procedure.input(z.any()).mutation(() => null),
    updateAddress: t.procedure.input(z.any()).mutation(() => null),
    deleteAddress: t.procedure.input(z.any()).mutation(() => null),
    setDefaultAddress: t.procedure.input(z.any()).mutation(() => null),
    getDefaultAddress: t.procedure.query(() => null),
    getCountries: t.procedure.query(() => null),
    getAdministrativeDivisions: t.procedure.input(z.any()).query(() => null),
    getAdministrativeDivisionsByParentId: t.procedure.input(z.any()).query(() => null),
  }),
  clientCategories: t.router({
    getCategories: t.procedure.query(() => null),
    getCategoryById: t.procedure.query(() => null),
    getCategoryTree: t.procedure.query(() => null),
    getCategoryBySlug: t.procedure.query(() => null),
    getRootCategories: t.procedure.query(() => null),
  }),
  clientNews: t.router({
    getNews: t.procedure.query(() => null),
    getNewsBySlug: t.procedure.query(() => null),
    getNewsCategories: t.procedure.query(() => null),
  }),
  clientProducts: t.router({
    getProducts: t.procedure.input(z.any()).query(() => null),
    getProductById: t.procedure.input(z.any()).query(() => null),
    getProductBySlug: t.procedure.input(z.any()).query(() => null),
    getNewProducts: t.procedure.query(() => null),
    getFeaturedProducts: t.procedure.query(() => null),
    getProductsByIds: t.procedure.query(() => null),
    getProductsByCategory: t.procedure.input(z.any()).query(() => null),
    getProductFilters: t.procedure.query(() => null),
  }),
  seo: t.router({
    getByPath: t.procedure.input(z.any()).query(() => null),
  }),
  settings: t.router({
    getPublicSettings: t.procedure.query(() => null),
    getPublicSetting: t.procedure.query(() => null),
  }),
  clientUser: t.router({
    register: t.procedure.input(z.any()).mutation(() => null),
    login: t.procedure.input(z.any()).mutation(() => null),
    getProfile: t.procedure.query(() => null),
    updateProfile: t.procedure.input(z.any()).mutation(() => null),
    updateAvatar: t.procedure.input(z.any()).mutation(() => null),
    refreshToken: t.procedure.input(z.any()).mutation(() => null),
    getLoyaltyBalance: t.procedure.query(() => null),
    getLoyaltyHistory: t.procedure.query(() => null),
    redeemLoyaltyPoints: t.procedure.input(z.any()).mutation(() => null),
  }),
  sections: t.router({
    list: t.procedure.input(z.any()).query(() => null),
    listAll: t.procedure.query(() => null),
    create: t.procedure.input(z.any()).mutation(() => null),
    update: t.procedure.input(z.any()).mutation(() => null),
    delete: t.procedure.input(z.any()).mutation(() => null),
    reorder: t.procedure.input(z.any()).mutation(() => null),
  }),
  publicSupportClients: t.router({
    getAvailable: t.procedure.query(() => null),
    getWidgetScripts: t.procedure.query(() => null),
    getDefault: t.procedure.query(() => null),
    getTypes: t.procedure.query(() => null),
    getByType: t.procedure.query(() => null),
    testAvailability: t.procedure.query(() => null),
  }),
  translation: t.router({
    getLocaleConfig: t.procedure.query(() => null),
    getTranslations: t.procedure.query(() => null),
    getTranslation: t.procedure.query(() => null),
    createTranslation: t.procedure.input(z.any()).mutation(() => null),
    updateTranslation: t.procedure.input(z.any()).mutation(() => null),
    deleteTranslation: t.procedure.input(z.any()).mutation(() => null),
    clearCache: t.procedure.input(z.any()).mutation(() => null),
  }),
});

// Export the proper tRPC router type
export type AppRouter = typeof appRouter;
